Timer unit: 1e-06 s

Total time: 2.79922 s
File: <ipython-input-3-3e336a603436>
Function: P_step_ravel at line 1

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     1                                           def P_step_ravel(P_pp, P_p):
     2                                               '''
     3                                               mb work with flat and then reshape in return
     4                                               norm by now, mb add some more optimisations in future, also cuda
     5                                               '''
     6                                           
     7         1        196.0    196.0      0.0      S = P_p.shape[0]
     8         1          5.0      5.0      0.0      N = P_p.shape[1]
     9                                               
    10         1      15484.0  15484.0      0.6      P = np.zeros_like(P_p)
    11         1      24161.0  24161.0      0.9      P[2:-2, 2:-2, 2:-2] = 2 * P_p[2:-2, 2:-2, 2:-2] - P_pp[2:-2, 2:-2, 2:-2]
    12         1      12430.0  12430.0      0.4      Z = np.zeros_like(P_p)
    13         1      12095.0  12095.0      0.4      Z[2:-2, 2:-2, 2:-2] = 22.5 * P_p[2:-2, 2:-2, 2:-2]
    14                                               
    15         1      17331.0  17331.0      0.6      cell_indeces_flat = np.arange(S * N * N).reshape(S, N, N)[2:-2, 2:-2, 2:-2].ravel().reshape(-1, 1) # vertical vector
    16                                           
    17         1     130173.0 130173.0      4.7      s1_indexes_flat = cell_indeces_flat + np.array([-1, 1, -N, N, -N**2, N**2])      # i±1 j±1 k±1 
    18         1     116943.0 116943.0      4.2      s2_indexes_flat = cell_indeces_flat + np.array([-1, 1, -N, N, -N**2, N**2]) * 2  # i±2 j±2 k±2 
    19         1     131355.0 131355.0      4.7      s1_values = P_p.ravel()[s1_indexes_flat] # each row contains 6 neighbors of cell 
    20         1     148109.0 148109.0      5.3      s2_values = P_p.ravel()[s2_indexes_flat] # each row contains 6 neighbors of cell 
    21         1      85138.0  85138.0      3.0      s1 = np.sum(s1_values, axis=1) # sum by axis=1 is faster for default order
    22         1      68612.0  68612.0      2.5      s2 = np.sum(s2_values, axis=1)
    23                                           
    24         1      56716.0  56716.0      2.0      Z[2:-2, 2:-2, 2:-2] -=   4 * s1.reshape(S-4, N-4, N-4)
    25         1       9964.0   9964.0      0.4      Z[2:-2, 2:-2, 2:-2] += 1/4 * s2.reshape(S-4, N-4, N-4)
    26                                           
    27         1         37.0     37.0      0.0      m1 = np.array([1, -1, -1/8, -1/8])
    28         1          7.0      7.0      0.0      m2 = np.array([1, -1])
    29                                           
    30         1     108568.0 108568.0      3.9      s3_V_indexes = cell_indeces_flat + np.array([N**2, -N**2, 2*N**2, -2*N**2])
    31         1     269996.0 269996.0      9.6      s3_V_values = P_p.ravel()[s3_V_indexes] * m1 # po idee mozhno za skobki kak to vinesti m1 i m2
    32         1      50767.0  50767.0      1.8      s3_V_sum = np.sum(s3_V_values, axis=1)
    33         1      58554.0  58554.0      2.1      s3_N_indexes = cell_indeces_flat + np.array([N**2, -N**2])
    34         1     106723.0 106723.0      3.8      s3_N_values = ro.ravel()[s3_N_indexes] * m2
    35         1      42948.0  42948.0      1.5      s3_N_sum = np.sum(s3_N_values, axis=1)
    36         1      12323.0  12323.0      0.4      s3 = (s3_V_sum * s3_N_sum).reshape(S-4, N-4, N-4)
    37                                               
    38         1      41222.0  41222.0      1.5      s4_V_indexes = cell_indeces_flat + np.array([N, -N, 2*N, -2*N])
    39         1     227949.0 227949.0      8.1      s4_V_values = P_p.ravel()[s4_V_indexes] * m1
    40         1      50449.0  50449.0      1.8      s4_V_sum = np.sum(s4_V_values, axis=1)
    41         1      58134.0  58134.0      2.1      s4_N_indexes = cell_indeces_flat + np.array([N, -N])
    42         1     114284.0 114284.0      4.1      s4_N_values = ro.ravel()[s4_N_indexes] * m2
    43         1      35352.0  35352.0      1.3      s4_N_sum = np.sum(s4_N_values, axis=1)
    44         1      19322.0  19322.0      0.7      s4 = (s4_V_sum * s4_N_sum).reshape(S-4, N-4, N-4)
    45                                           
    46         1      98131.0  98131.0      3.5      s5_V_indexes = cell_indeces_flat + np.array([1, -1, 2, -2])
    47         1     225849.0 225849.0      8.1      s5_V_values = P_p.ravel()[s5_V_indexes] * m1
    48         1      63168.0  63168.0      2.3      s5_V_sum = np.sum(s5_V_values, axis=1)
    49         1      49989.0  49989.0      1.8      s5_N_indexes = cell_indeces_flat + np.array([1, -1])
    50         1      96128.0  96128.0      3.4      s5_N_values = ro.ravel()[s5_N_indexes] * m2
    51         1      41914.0  41914.0      1.5      s5_N_sum = np.sum(s5_N_values, axis=1)
    52         1      13874.0  13874.0      0.5      s5 = (s5_V_sum * s5_N_sum).reshape(S-4, N-4, N-4)
    53                                               
    54         1      90760.0  90760.0      3.2      Z[2:-2, 2:-2, 2:-2] += (s3 + s4 + s5) * ro[2:-2, 2:-2, 2:-2]
    55         1      72076.0  72076.0      2.6      P[2:-2, 2:-2, 2:-2] -= Z[2:-2, 2:-2, 2:-2] * K_2_by_3[2:-2, 2:-2, 2:-2]
    56         1      21981.0  21981.0      0.8      P[ro < 0.1] = 0
    57         1          5.0      5.0      0.0      return P